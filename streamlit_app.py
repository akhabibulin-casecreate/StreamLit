import streamlit as st
import pandas as pd
import psycopg2
from datetime import datetime

# --- 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ---

st.set_page_config(layout="wide", page_title="–ü—É–ª—å—Ç –∑–∞–∫—É–ø–æ–∫")

st.title("ü§ç –ü—É–ª—å—Ç –∑–∞–∫—É–ø–æ–∫")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
@st.cache_resource
def init_connection():
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL."""
    try:
        conn = psycopg2.connect(**st.secrets["postgres"])
        return conn
    except psycopg2.OperationalError as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

conn = init_connection()

# --- 2. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---

@st.cache_data(ttl=600) # –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 10 –º–∏–Ω—É—Ç
def run_query(query):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç SELECT-–∑–∞–ø—Ä–æ—Å—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ DataFrame."""
    if conn:
        with conn.cursor() as cur:
            cur.execute(query)
            rows = cur.fetchall()
            colnames = [desc[0] for desc in cur.description]
            return pd.DataFrame(rows, columns=colnames)
    return pd.DataFrame()

def modify_db(query, params):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã INSERT, UPDATE, DELETE."""
    if conn:
        with conn.cursor() as cur:
            cur.execute(query, params)
        conn.commit()

# --- 3. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –ø–æ—Å—Ç–∞–≤–æ–∫ (–∞–Ω–∞–ª–æ–≥ getSupplies)
supplies_query = """
SELECT 
    id, product_type, delivery_label, supplier, status, 
    order_date, estimated_date, logistics_method, brand,
    destination, order_in_ms, amount_rmb
FROM public.cp_supply_list 
WHERE delivery_in_russia_date IS NULL AND product_type IS NOT NULL AND status <> '–ü—Ä–∏—à–ª–æ'
ORDER BY product_type, status DESC, order_date ASC;
"""

# –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∞–Ω–∞–ª–æ–≥ get_archive_list)
archive_query = """
SELECT 
    id, delivery_date, russia_logistics_method, russian_log_number, 
    delivery_label, supplier, logistic_cost, logistic_cost_ru, 
    weight_from_ms, price_ms
FROM cp_supply_list 
WHERE status = '–ü—Ä–∏—à–ª–æ'
ORDER BY CAST(delivery_date AS DATE) DESC;
"""

supplies_df = run_query(supplies_query)
archive_df = run_query(archive_query)
suppliers_list = run_query("SELECT DISTINCT supplier FROM public.cp_suppliers_list")['supplier'].tolist()
logistics_list = supplies_df['logistics_method'].unique().tolist()
brands_list = supplies_df['brand'].dropna().unique().tolist()
destinations_list = supplies_df['destination'].dropna().unique().tolist()

# --- 4. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

tab_editor, tab_archive = st.tabs(["üìù –†–µ–¥–∞–∫—Ç–æ—Ä", "üóÑÔ∏è –ê—Ä—Ö–∏–≤ –ø–æ—Å—Ç–∞–≤–æ–∫"])

# --- –í–ö–õ–ê–î–ö–ê "–†–ï–î–ê–ö–¢–û–†" ---
with tab_editor:
    st.header("–¢–µ–∫—É—â–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏")

    # --- –§–∏–ª—å—Ç—Ä—ã ---
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        selected_destination = st.multiselect("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", options=destinations_list, placeholder="–í—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    with col2:
        selected_suppliers = st.multiselect("–ü–æ—Å—Ç–∞–≤—â–∏–∫", options=suppliers_list, placeholder="–í—Å–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏")
    with col3:
        selected_logistics = st.multiselect("–õ–æ–≥–∏—Å—Ç–∏–∫–∞", options=logistics_list, placeholder="–í—Å–µ —Ç–∏–ø—ã")
    with col4:
        selected_brands = st.multiselect("–ë—Ä–µ–Ω–¥ (–ò–ü)", options=brands_list, placeholder="–í—Å–µ –±—Ä–µ–Ω–¥—ã")

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filtered_df = supplies_df.copy()
    if selected_destination:
        filtered_df = filtered_df[filtered_df['destination'].isin(selected_destination)]
    if selected_suppliers:
        filtered_df = filtered_df[filtered_df['supplier'].isin(selected_suppliers)]
    if selected_logistics:
        filtered_df = filtered_df[filtered_df['logistics_method'].isin(selected_logistics)]
    if selected_brands:
        filtered_df = filtered_df[filtered_df['brand'].isin(selected_brands)]
    
    # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ---
    st.dataframe(filtered_df, use_container_width=True)


# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
with st.sidebar:
    st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏")
    
    # --- –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏ ---
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ—Å—Ç–∞–≤–∫—É", expanded=False):
        with st.form("new_supply_form", clear_on_submit=True):
            st.subheader("–î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏")
            
            new_delivery_label = st.text_input("–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤–∫–∏*", help="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ")
            new_product_type = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è*", options=["1. –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π", "2. –ú–∞—Ç–æ–≤—ã–π", "3. –ö–Ω–∏–∂–∫–∏", "4. –ó–∞–∫—É–ø–∞–µ–º—ã–µ —á–µ—Ö–ª—ã", "5. Premium Soft-Touch", "7. –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", "8. –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "9. –û—Å—Ç–∞–ª—å–Ω–æ–µ"])
            new_supplier = st.selectbox("–ü–æ—Å—Ç–∞–≤—â–∏–∫*", options=suppliers_list)
            new_destination = st.selectbox("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ*", options=["SPB", "MSK", "NSK", "KRD", "KZN"])
            new_amount_rmb = st.number_input("–°—É–º–º–∞ (RMB)", min_value=0.0, format="%.2f")
            
            submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É")
            if submitted:
                if not new_delivery_label or not new_product_type or not new_supplier:
                    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (*).")
                else:
                    # –ê–Ω–∞–ª–æ–≥ addSupplies
                    insert_query = """
                    INSERT INTO cp_supply_list (order_date, delivery_label, estimated_date, status, product_type, supplier, destination, amount_rmb) 
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s);
                    """
                    # –†–∞—Å—á–µ—Ç –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–π –¥–∞—Ç—ã (—Å–µ–≥–æ–¥–Ω—è + 39 –¥–Ω–µ–π)
                    estimated_date = datetime.now() + pd.Timedelta(days=39)
                    params = (datetime.now().date(), new_delivery_label, estimated_date.date(), '–ó–∞–∫–∞–∑–∞–Ω', new_product_type, new_supplier, new_destination, new_amount_rmb)
                    
                    modify_db(insert_query, params)
                    st.success(f"–ü–æ—Å—Ç–∞–≤–∫–∞ '{new_delivery_label}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    st.cache_data.clear() # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

    # --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ—Å—Ç–∞–≤–∫–∏ ---
    with st.expander("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", expanded=True):
        if supplies_df.empty:
            st.info("–ù–µ—Ç –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        else:
            # –í—ã–±–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            supply_to_edit_label = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", options=supplies_df['delivery_label'])
            
            if supply_to_edit_label:
                selected_supply = supplies_df[supplies_df['delivery_label'] == supply_to_edit_label].iloc[0]
                
                with st.form("edit_supply_form"):
                    st.subheader(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {selected_supply['delivery_label']}")
                    
                    supply_id = int(selected_supply['id'])
                    
                    # –ü–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    status = st.selectbox("–°—Ç–∞—Ç—É—Å", options=["–ó–∞–∫–∞–∑–∞–Ω", "–ù–∞ –æ–ø–ª–∞—Ç–µ", "–û–ø–ª–∞—á–µ–Ω", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω", "–ü—Ä–∏—à–ª–æ"], index=["–ó–∞–∫–∞–∑–∞–Ω", "–ù–∞ –æ–ø–ª–∞—Ç–µ", "–û–ø–ª–∞—á–µ–Ω", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω", "–ü—Ä–∏—à–ª–æ"].index(selected_supply['status']))
                    order_in_ms = st.text_input("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ –ú–°", value=selected_supply.get('order_in_ms', ''))
                    amount_rmb = st.number_input("–°—É–º–º–∞ (RMB)", min_value=0.0, value=float(selected_supply.get('amount_rmb', 0) or 0), format="%.2f")

                    col_save, col_delete = st.columns(2)
                    with col_save:
                        save_clicked = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", use_container_width=True)
                    with col_delete:
                        delete_clicked = st.form_submit_button("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", use_container_width=True)
                    
                    if save_clicked:
                        # –ê–Ω–∞–ª–æ–≥ updateSupplies
                        update_query = """
                        UPDATE cp_supply_list SET status = %s, order_in_ms = %s, amount_rmb = %s WHERE id = %s;
                        """
                        params = (status, order_in_ms, amount_rmb, supply_id)
                        modify_db(update_query, params)
                        st.success(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ '{supply_to_edit_label}' –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
                        st.cache_data.clear()
                    
                    if delete_clicked:
                        # –ê–Ω–∞–ª–æ–≥ deleteSupplies
                        delete_query = "DELETE FROM cp_supply_list WHERE id = %s;"
                        modify_db(delete_query, (supply_id,))
                        st.warning(f"–ü–æ—Å—Ç–∞–≤–∫–∞ '{supply_to_edit_label}' —É–¥–∞–ª–µ–Ω–∞.")
                        st.cache_data.clear()


# --- –í–ö–õ–ê–î–ö–ê "–ê–†–•–ò–í" ---
with tab_archive:
    st.header("–ê—Ä—Ö–∏–≤ –ø–æ—Å—Ç–∞–≤–æ–∫ (—Å—Ç–∞—Ç—É—Å '–ü—Ä–∏—à–ª–æ')")
    
    # --- –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∞—Ä—Ö–∏–≤–∞ ---
    col1, col2 = st.columns(2)
    with col1:
        start_date = st.date_input("–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å", value=None)
    with col2:
        end_date = st.date_input("–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ", value=None)

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filtered_archive_df = archive_df.copy()
    if start_date:
        filtered_archive_df = filtered_archive_df[filtered_archive_df['delivery_date'] >= pd.to_datetime(start_date)]
    if end_date:
        filtered_archive_df = filtered_archive_df[filtered_archive_df['delivery_date'] <= pd.to_datetime(end_date)]
        
    st.dataframe(filtered_archive_df, use_container_width=True)